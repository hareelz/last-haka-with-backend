{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { API } from \"../../helpers/consts\";\nimport { getConfig } from \"../../helpers/functions\";\nexport const registerFreelance = createAsyncThunk(\"authFreelancer/register\", async newUser => {\n  try {\n    await axios.post(`${API}/v1/freelancer/register/`, newUser);\n  } catch (error) {\n    throw error;\n  }\n});\nexport const loginFreeLance = createAsyncThunk(\"authFreelancer/loginFreeLance\", async userData => {\n  try {\n    const result = await axios.post(`${API}/v1/freelancer/login/`, userData);\n    localStorage.setItem(\"tokensFree\", JSON.stringify(result.data));\n    localStorage.setItem(\"emailFree\", userData.email);\n    console.log(result);\n    return userData.email;\n  } catch (error) {\n    throw error;\n  }\n});\nexport const getCategories = createAsyncThunk(\"authFreeLancer/getCategories\", async () => {\n  try {\n    const result = await axios.get(`${API}/v1/category/`);\n    return result.data;\n  } catch (error) {\n    throw error;\n  }\n});\nexport const logoutFreeLance = () => {\n  localStorage.removeItem(\"tokensFree\");\n  localStorage.removeItem(\"emailFree\");\n};\n\n// export const checkAuthFreeLance = createAsyncThunk(\n//   \"authFreelancer/checkAuth\",\n//   async () => {\n//     try {\n//       const tokens = JSON.parse(localStorage.getItem(\"tokensFree\"));\n\n//       const Authorization = `Bearer ${tokens.access}`;\n\n//       const config = {\n//         headers: {\n//           Authorization,\n//         },\n//       };\n\n//       const result = await axios.post(\n//         `${API}/v1/freelancer/refresh/`,\n//         {\n//           refresh: tokens.refresh,\n//         },\n//         config\n//       );\n\n//       localStorage.setItem(\n//         \"tokensFree\",\n//         JSON.stringify({\n//           access: result.data.access,\n//           refresh: tokens.refresh,\n//         })\n//       );\n//     } catch (error) {\n//       logoutFreeLance();\n//     }\n//   }\n// );","map":{"version":3,"names":["createAsyncThunk","axios","API","getConfig","registerFreelance","newUser","post","error","loginFreeLance","userData","result","localStorage","setItem","JSON","stringify","data","email","console","log","getCategories","get","logoutFreeLance","removeItem"],"sources":["/Users/elzar/js/makers/last-haka/src/store/actions/authActionsFreeLance.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { API } from \"../../helpers/consts\";\nimport { getConfig } from \"../../helpers/functions\";\n\nexport const registerFreelance = createAsyncThunk(\n  \"authFreelancer/register\",\n  async (newUser) => {\n    try {\n      await axios.post(`${API}/v1/freelancer/register/`, newUser);\n    } catch (error) {\n      throw error;\n    }\n  }\n);\n\nexport const loginFreeLance = createAsyncThunk(\n  \"authFreelancer/loginFreeLance\",\n  async (userData) => {\n    try {\n      const result = await axios.post(`${API}/v1/freelancer/login/`, userData);\n      localStorage.setItem(\"tokensFree\", JSON.stringify(result.data));\n      localStorage.setItem(\"emailFree\", userData.email);\n      console.log(result);\n      return userData.email;\n    } catch (error) {\n      throw error;\n    }\n  }\n);\n\nexport const getCategories = createAsyncThunk(\n  \"authFreeLancer/getCategories\",\n  async () => {\n    try {\n      const result = await axios.get(`${API}/v1/category/`);\n      return result.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n);\n\nexport const logoutFreeLance = () => {\n  localStorage.removeItem(\"tokensFree\");\n  localStorage.removeItem(\"emailFree\");\n};\n\n// export const checkAuthFreeLance = createAsyncThunk(\n//   \"authFreelancer/checkAuth\",\n//   async () => {\n//     try {\n//       const tokens = JSON.parse(localStorage.getItem(\"tokensFree\"));\n\n//       const Authorization = `Bearer ${tokens.access}`;\n\n//       const config = {\n//         headers: {\n//           Authorization,\n//         },\n//       };\n\n//       const result = await axios.post(\n//         `${API}/v1/freelancer/refresh/`,\n//         {\n//           refresh: tokens.refresh,\n//         },\n//         config\n//       );\n\n//       localStorage.setItem(\n//         \"tokensFree\",\n//         JSON.stringify({\n//           access: result.data.access,\n//           refresh: tokens.refresh,\n//         })\n//       );\n//     } catch (error) {\n//       logoutFreeLance();\n//     }\n//   }\n// );\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,sBAAsB;AAC1C,SAASC,SAAS,QAAQ,yBAAyB;AAEnD,OAAO,MAAMC,iBAAiB,GAAGJ,gBAAgB,CAC/C,yBAAyB,EACzB,MAAOK,OAAO,IAAK;EACjB,IAAI;IACF,MAAMJ,KAAK,CAACK,IAAI,CAAE,GAAEJ,GAAI,0BAAyB,EAAEG,OAAO,CAAC;EAC7D,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGR,gBAAgB,CAC5C,+BAA+B,EAC/B,MAAOS,QAAQ,IAAK;EAClB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMT,KAAK,CAACK,IAAI,CAAE,GAAEJ,GAAI,uBAAsB,EAAEO,QAAQ,CAAC;IACxEE,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAACK,IAAI,CAAC,CAAC;IAC/DJ,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEH,QAAQ,CAACO,KAAK,CAAC;IACjDC,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC;IACnB,OAAOD,QAAQ,CAACO,KAAK;EACvB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,OAAO,MAAMY,aAAa,GAAGnB,gBAAgB,CAC3C,8BAA8B,EAC9B,YAAY;EACV,IAAI;IACF,MAAMU,MAAM,GAAG,MAAMT,KAAK,CAACmB,GAAG,CAAE,GAAElB,GAAI,eAAc,CAAC;IACrD,OAAOQ,MAAM,CAACK,IAAI;EACpB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,OAAO,MAAMc,eAAe,GAAGA,CAAA,KAAM;EACnCV,YAAY,CAACW,UAAU,CAAC,YAAY,CAAC;EACrCX,YAAY,CAACW,UAAU,CAAC,WAAW,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}