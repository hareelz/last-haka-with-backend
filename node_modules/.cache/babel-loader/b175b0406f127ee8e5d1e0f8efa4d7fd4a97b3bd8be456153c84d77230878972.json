{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { API } from \"../../helpers/consts\";\nexport const registerFreelance = createAsyncThunk(\"authFreelancer/register\", async newUser => {\n  try {\n    await axios.post(`${API}/v1/freelancer/register/`, newUser);\n  } catch (error) {\n    throw error;\n  }\n});\nexport const loginFreeLance = createAsyncThunk(\"authFreelancer/loginFreeLance\", async userData => {\n  try {\n    const result = await axios.post(`${API}/v1/freelancer/login/`, userData);\n    localStorage.setItem(\"tokens\", JSON.stringify(result.data));\n    localStorage.setItem(\"email\", userData.email);\n    return userData.email;\n  } catch (error) {\n    throw error;\n  }\n});\nexport const getCategories = createAsyncThunk(\"authFreeLancer/getCategories\", async () => {\n  try {\n    const result = await axios.get(`${API}/v1/category/`);\n    return result.data;\n  } catch (error) {\n    throw error;\n  }\n});\nexport const logoutFreeLance = () => {\n  localStorage.removeItem(\"tokens\");\n  localStorage.removeItem(\"email\");\n};\nexport const checkAuthFreeLance = createAsyncThunk(\"authFreelancer/checkAuth\", async () => {\n  try {\n    const tokens = JSON.parse(localStorage.getItem(\"tokens\"));\n    const Authorization = `Bearer ${tokens.access}`;\n    const config = {\n      headers: {\n        Authorization\n      }\n    };\n    const result = await axios.post(`${API}/v1/freelancer/refresh/`, {\n      refresh: tokens.refresh\n    }, config);\n    localStorage.setItem(\"tokens\", JSON.stringify({\n      access: result.data.access,\n      refresh: tokens.refresh\n    }));\n  } catch (error) {\n    logoutFreeLance();\n  }\n});","map":{"version":3,"names":["createAsyncThunk","axios","API","registerFreelance","newUser","post","error","loginFreeLance","userData","result","localStorage","setItem","JSON","stringify","data","email","getCategories","get","logoutFreeLance","removeItem","checkAuthFreeLance","tokens","parse","getItem","Authorization","access","config","headers","refresh"],"sources":["C:/Users/asus_/Desktop/lask-hackathon/last-haka-with-backend/src/store/actions/authActionsFreeLance.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../../helpers/consts\";\r\n\r\nexport const registerFreelance = createAsyncThunk(\r\n  \"authFreelancer/register\",\r\n  async (newUser) => {\r\n    try {\r\n      await axios.post(`${API}/v1/freelancer/register/`, newUser);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const loginFreeLance = createAsyncThunk(\r\n  \"authFreelancer/loginFreeLance\",\r\n  async (userData) => {\r\n    try {\r\n      const result = await axios.post(`${API}/v1/freelancer/login/`, userData);\r\n      localStorage.setItem(\"tokens\", JSON.stringify(result.data));\r\n      localStorage.setItem(\"email\", userData.email);\r\n      return userData.email;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const getCategories = createAsyncThunk(\r\n  \"authFreeLancer/getCategories\",\r\n  async () => {\r\n    try {\r\n      const result = await axios.get(`${API}/v1/category/`);\r\n      return result.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n);\r\n\r\nexport const logoutFreeLance = () => {\r\n  localStorage.removeItem(\"tokens\");\r\n  localStorage.removeItem(\"email\");\r\n};\r\n\r\nexport const checkAuthFreeLance = createAsyncThunk(\r\n  \"authFreelancer/checkAuth\",\r\n  async () => {\r\n    try {\r\n      const tokens = JSON.parse(localStorage.getItem(\"tokens\"));\r\n\r\n      const Authorization = `Bearer ${tokens.access}`;\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization,\r\n        },\r\n      };\r\n\r\n      const result = await axios.post(\r\n        `${API}/v1/freelancer/refresh/`,\r\n        {\r\n          refresh: tokens.refresh,\r\n        },\r\n        config\r\n      );\r\n\r\n      localStorage.setItem(\r\n        \"tokens\",\r\n        JSON.stringify({\r\n          access: result.data.access,\r\n          refresh: tokens.refresh,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      logoutFreeLance();\r\n    }\r\n  }\r\n);\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,sBAAsB;AAE1C,OAAO,MAAMC,iBAAiB,GAAGH,gBAAgB,CAC/C,yBAAyB,EACzB,MAAOI,OAAO,IAAK;EACjB,IAAI;IACF,MAAMH,KAAK,CAACI,IAAI,CAAE,GAAEH,GAAI,0BAAyB,EAAEE,OAAO,CAAC;EAC7D,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGP,gBAAgB,CAC5C,+BAA+B,EAC/B,MAAOQ,QAAQ,IAAK;EAClB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMR,KAAK,CAACI,IAAI,CAAE,GAAEH,GAAI,uBAAsB,EAAEM,QAAQ,CAAC;IACxEE,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAACK,IAAI,CAAC,CAAC;IAC3DJ,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACO,KAAK,CAAC;IAC7C,OAAOP,QAAQ,CAACO,KAAK;EACvB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,OAAO,MAAMU,aAAa,GAAGhB,gBAAgB,CAC3C,8BAA8B,EAC9B,YAAY;EACV,IAAI;IACF,MAAMS,MAAM,GAAG,MAAMR,KAAK,CAACgB,GAAG,CAAE,GAAEf,GAAI,eAAc,CAAC;IACrD,OAAOO,MAAM,CAACK,IAAI;EACpB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,OAAO,MAAMY,eAAe,GAAGA,CAAA,KAAM;EACnCR,YAAY,CAACS,UAAU,CAAC,QAAQ,CAAC;EACjCT,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGpB,gBAAgB,CAChD,0BAA0B,EAC1B,YAAY;EACV,IAAI;IACF,MAAMqB,MAAM,GAAGT,IAAI,CAACU,KAAK,CAACZ,YAAY,CAACa,OAAO,CAAC,QAAQ,CAAC,CAAC;IAEzD,MAAMC,aAAa,GAAI,UAASH,MAAM,CAACI,MAAO,EAAC;IAE/C,MAAMC,MAAM,GAAG;MACbC,OAAO,EAAE;QACPH;MACF;IACF,CAAC;IAED,MAAMf,MAAM,GAAG,MAAMR,KAAK,CAACI,IAAI,CAC5B,GAAEH,GAAI,yBAAwB,EAC/B;MACE0B,OAAO,EAAEP,MAAM,CAACO;IAClB,CAAC,EACDF,MACF,CAAC;IAEDhB,YAAY,CAACC,OAAO,CAClB,QAAQ,EACRC,IAAI,CAACC,SAAS,CAAC;MACbY,MAAM,EAAEhB,MAAM,CAACK,IAAI,CAACW,MAAM;MAC1BG,OAAO,EAAEP,MAAM,CAACO;IAClB,CAAC,CACH,CAAC;EACH,CAAC,CAAC,OAAOtB,KAAK,EAAE;IACdY,eAAe,CAAC,CAAC;EACnB;AACF,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}